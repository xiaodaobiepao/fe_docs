(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{223:function(v,_,t){"use strict";t.r(_);var e=t(0),a=Object(e.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"从输入url到展示出页面发生了什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#从输入url到展示出页面发生了什么"}},[v._v("#")]),v._v(" 从输入URL到展示出页面发生了什么")]),v._v(" "),t("p",[v._v("这是一个很经典的面试题，不同水准的面试者表现出不同的侧重和对细节的把握，因此能看出面试者对web服务的整体把控。对这道面试题回答的越详细越好，但是从url送到后端，再到后端将响应返回的前端的这段时间内，对于前端工程师来说是一个黑盒，有个大致的了解即可，但对于在浏览器端发生的事，前端工程师一定得掌握，这样才能在工作中写出性能更高的代码。")]),v._v(" "),t("h3",{attrs:{id:"用户输入到服务端接收到请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用户输入到服务端接收到请求"}},[v._v("#")]),v._v(" 用户输入到服务端接收到请求")]),v._v(" "),t("p",[v._v("用户输入url后，浏览器进程会将url地址通过IPC通信(浏览器进程之间的通信方式)传给网络进程，网络进程会先根据url地址去查找对应的缓存，如果找到缓存，则返回缓存的内容，如果没有找到缓存，则需要到服务端去请求最新的内容。")]),v._v(" "),t("p",[v._v("网络进程在向服务端发送请求之前，得先知道服务器是谁，服务器在哪。而仅仅url是不知道服务器地址的，所以此时还需要找到服务器的IP地址，此时就要用到了dns解析，网络世界中存在着一种叫DNS服务器的东西，DNS服务器是网络IP地址的地址簿，这里可以通过域名去获取对应的IP，就是我们的服务器地址。网络进程会先在本地和浏览器缓存中查找IP，如果查不到，才会通往DNS服务器去查找，拿到IP地址后，我们就要发出真正的请求了。")]),v._v(" "),t("p",[v._v("网络进程会先和服务器通过三次握手建立TCP通信，关于三次握手，四次挥手的具体细节我会在网络协议模块细讲，这里不展开讲了。建立通信后，浏览器去会构建请求行，请求头以及请求体发送到服务端，服务端根据请求信息，返回对应的响应内容到浏览器端。")]),v._v(" "),t("h3",{attrs:{id:"浏览器接收到服务端的响应"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浏览器接收到服务端的响应"}},[v._v("#")]),v._v(" 浏览器接收到服务端的响应")]),v._v(" "),t("p",[v._v("浏览器收到响应后，会解析响应信息，比如返回的状态码是否正确，如果是 "),t("code",[v._v("301")]),v._v(" 或者 "),t("code",[v._v("302")]),v._v(" 响应码会做重定向处理，如果是 "),t("code",[v._v("200")]),v._v(" 才会继续处理接下来的信息。浏览器还会根据响应头的 "),t("code",[v._v("Content-Type")]),v._v(" 来判断返回内容是什么类型，如果是 "),t("code",[v._v("text/html")]),v._v(" 则是告诉浏览器，这是html文件。如果是 "),t("code",[v._v("application/octet-stream")]),v._v("，显示数据是字节流型的，浏览器一般会下载处理。")]),v._v(" "),t("p",[v._v("如果是 "),t("code",[v._v("HTML")]),v._v(" 文档，网络进程会和渲染进程之间建立一个通道，将 "),t("code",[v._v("HTML")]),v._v(" 内容传输给渲染进程，由渲染进程进行渲染，接下来就是大体讲解浏览器的渲染过程。")]),v._v(" "),t("h5",{attrs:{id:"解析dom"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解析dom"}},[v._v("#")]),v._v(" 解析DOM")]),v._v(" "),t("p",[v._v("第一步就是解析 "),t("code",[v._v("HTML")]),v._v(" 代码，浏览器其实并不认识 "),t("code",[v._v("HTML")]),v._v(" 代码，所以我们需要将 "),t("code",[v._v("HTML")]),v._v(" 转成浏览器认识的结构，就是 "),t("code",[v._v("DOM")]),v._v(" 树，在浏览器中打开控制台，输入 "),t("code",[v._v("document")]),v._v("，所展现出来的结构就是 "),t("code",[v._v("DOM")]),v._v("，"),t("code",[v._v("DOM")]),v._v("结构存在内存中，准确描述了每个节点之间的关系，并且提供了api方便用户去控制它。")]),v._v(" "),t("h5",{attrs:{id:"解析css"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解析css"}},[v._v("#")]),v._v(" 解析CSS")]),v._v(" "),t("p",[v._v("同样的，浏览器也需要将 "),t("code",[v._v("CSS")]),v._v(" 代码转换成浏览器能够理解的结构 "),t("code",[v._v("stylesheets")]),v._v("，这个过程中大概有以下几步：")]),v._v(" "),t("ul",[t("li",[v._v("将 "),t("code",[v._v("css")]),v._v(" 转换成 "),t("code",[v._v("CSSOM")])]),v._v(" "),t("li",[v._v("转换浏览器不能识别的单位，比如"),t("code",[v._v("blue")]),v._v(", "),t("code",[v._v("bold")]),v._v(" 之内的浏览器不能直接识别的值。")]),v._v(" "),t("li",[v._v("结合 "),t("code",[v._v("DOM")]),v._v(" 计算每个节点的样式，最终的样式可以在 "),t("code",[v._v("ComputedStyle")]),v._v(" 中看到。")])]),v._v(" "),t("h5",{attrs:{id:"生成布局树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生成布局树"}},[v._v("#")]),v._v(" 生成布局树")]),v._v(" "),t("p",[v._v("解析完 "),t("code",[v._v("HTML")]),v._v(" 和 "),t("code",[v._v("css")]),v._v(" 后，会将页面中可见的节点生成布局树，然后计算布局树节点的几何位置。")]),v._v(" "),t("h5",{attrs:{id:"分层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分层"}},[v._v("#")]),v._v(" 分层")]),v._v(" "),t("p",[v._v("生成布局树之后不代表就可以绘制了，此时我们还要给页面进行分层，页面中不仅有x轴和y轴，还有z轴。一般是根据层叠上下文去分层，每个层叠上下文为单独一层，关于层叠上下文，可以去参考张鑫旭大佬的博客。另外就是当发生了裁剪时，也会造成分层，什么是裁剪？比如对一个盒子设置了overflow: hidden；但该盒子实际大小可能大于定义的大小，导致内容被裁剪了，此时就会形成分层。还有就是滚动条也是单独为一层")]),v._v(" "),t("h5",{attrs:{id:"绘制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#绘制"}},[v._v("#")]),v._v(" 绘制")]),v._v(" "),t("p",[v._v("分层完毕，渲染引擎会根据分层结果生成绘制列表，渲染引擎会把绘制列表提交给合成线程。")]),v._v(" "),t("h5",{attrs:{id:"栅格化操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栅格化操作"}},[v._v("#")]),v._v(" 栅格化操作")]),v._v(" "),t("p",[v._v("合成线程会将绘制列表分成图块，并且将视口（即屏幕可见部分）附近的图块转换为位图，将图块转为位图的过程叫做栅格化。")]),v._v(" "),t("h5",{attrs:{id:"合成和显示"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#合成和显示"}},[v._v("#")]),v._v(" 合成和显示")]),v._v(" "),t("p",[v._v("当所有的图块光栅化完成后，合成线程会生成一个绘制图块的命令 "),t("code",[v._v("DrawQuad")]),v._v("，然后提交给浏览器进程，浏览器进程的 "),t("code",[v._v("viz")]),v._v(" 组件会接受命令，并把内容绘制到内存中，最终显示在页面上。")])])}),[],!1,null,null,null);_.default=a.exports}}]);